import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useCart } from "@/hooks/useCartProvider";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useQuery } from "@tanstack/react-query";

const orderSchema = z.object({
  customerName: z.string().min(2, "Name must be at least 2 characters"),
  customerPhone: z.string().min(10, "Phone number must be at least 10 characters"),
  customerEmail: z.string().email("Invalid email address").optional().or(z.literal("")),
  countyId: z.string().min(1, "Please select a county"),
  deliveryAddress: z.string().min(5, "Address must be at least 5 characters"),
  notes: z.string().optional(),
  transactionCode: z.string().min(1, "Transaction code is required"),
});

type OrderFormData = z.infer<typeof orderSchema>;

interface OrderFormProps {
  onOrderComplete: (orderNumber: string) => void;
}

export function OrderForm({ onOrderComplete }: OrderFormProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { cartItems, getTotalPrice, clearCart } = useCart();
  const { toast } = useToast();

  const form = useForm<OrderFormData>({
    resolver: zodResolver(orderSchema),
    defaultValues: {
      customerName: "",
      customerPhone: "",
      customerEmail: "",
      countyId: "",
      deliveryAddress: "",
      notes: "",
      transactionCode: "",
    },
  });

  // Fetch counties for delivery
  const { data: counties } = useQuery({
    queryKey: ["counties"],
    queryFn: async () => {
      const { data, error } = await supabase
        .from("counties")
        .select("*")
        .order("name");
      if (error) throw error;
      return data;
    },
  });

  const onSubmit = async (data: OrderFormData) => {
    if (cartItems.length === 0) {
      toast({
        title: "Error",
        description: "Your cart is empty",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);

    try {
      // Get selected county for delivery fee calculation
      const selectedCounty = counties?.find(c => c.id === data.countyId);
      const deliveryFee = selectedCounty?.delivery_fee || 0;
      const subtotal = getTotalPrice();
      const total = subtotal + Number(deliveryFee);

      // Create customer
      const { data: customer, error: customerError } = await supabase
        .from("customers")
        .insert({
          name: data.customerName,
          phone: data.customerPhone,
          email: data.customerEmail || null,
        })
        .select()
        .single();

      if (customerError) throw customerError;

      // Calculate estimated delivery dates
      const minDays = selectedCounty?.estimated_days_min || 5;
      const maxDays = selectedCounty?.estimated_days_max || 14;
      const estimatedStart = new Date();
      estimatedStart.setDate(estimatedStart.getDate() + minDays);
      const estimatedEnd = new Date();
      estimatedEnd.setDate(estimatedEnd.getDate() + maxDays);

      // Create order (order_number will be auto-generated by trigger)
      const { data: order, error: orderError } = await supabase
        .from("orders")
        .insert({
          order_number: `ORD-${Date.now()}`, // Temporary order number
          customer_name: data.customerName,
          customer_phone: data.customerPhone,
          customer_email: data.customerEmail || null,
          county_name: selectedCounty?.name || "",
          delivery_address: data.deliveryAddress,
          delivery_fee: deliveryFee,
          subtotal: subtotal,
          total: total,
          notes: data.notes || "",
          transaction_code: data.transactionCode,
          estimated_delivery_start: estimatedStart.toISOString().split('T')[0],
          estimated_delivery_end: estimatedEnd.toISOString().split('T')[0],
        })
        .select()
        .single();

      if (orderError) throw orderError;

      // Create order items
      const orderItems = cartItems.map(item => ({
        order_id: order.id,
        product_id: item.product.id,
        product_name: item.product.name,
        variant_id: item.variant.id,
        variant_details: {
          style: item.variant.style,
          colour: item.variant.colour,
          inch: item.variant.inch,
          density: item.variant.density,
          lace_size: item.variant.lace_size,
        },
        price: item.variant.price,
        quantity: item.quantity,
      }));

      const { error: itemsError } = await supabase
        .from("order_items")
        .insert(orderItems);

      if (itemsError) throw itemsError;

      toast({
        title: "Order placed successfully!",
        description: `Order ${order.order_number} has been created.`,
      });

      clearCart();
      onOrderComplete(order.order_number);

    } catch (error) {
      console.error("Error creating order:", error);
      toast({
        title: "Error",
        description: "Failed to create order. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const selectedCounty = counties?.find(c => c.id === form.watch("countyId"));
  const deliveryFee = selectedCounty?.delivery_fee || 0;
  const subtotal = getTotalPrice();
  const total = subtotal + Number(deliveryFee);

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
      {/* Order Form */}
      <Card>
        <CardHeader>
          <CardTitle>Delivery Information</CardTitle>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="customerName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Full Name *</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter your full name" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="customerPhone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Phone Number *</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., 0712345678" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="customerEmail"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email Address (Optional)</FormLabel>
                    <FormControl>
                      <Input placeholder="your.email@example.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="countyId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>County *</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select your county" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {counties?.map((county) => (
                          <SelectItem key={county.id} value={county.id}>
                            {county.name} - KSh {county.delivery_fee.toLocaleString()} delivery
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="deliveryAddress"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Delivery Address *</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Enter your complete delivery address" 
                        className="min-h-[80px]"
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="notes"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Order Notes (Optional)</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Any special instructions or requests" 
                        className="min-h-[60px]"
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Payment Instructions */}
              <div className="bg-secondary/50 p-4 rounded-lg space-y-3">
                <h3 className="font-semibold text-sm">Payment Instructions</h3>
                <div className="text-sm space-y-2">
                  <p><strong>MPESA Payment:</strong></p>
                  <p>1. Go to MPESA on your phone</p>
                  <p>2. Select "Lipa na M-Pesa" → "Paybill"</p>
                  <p>3. Enter Paybill: <strong>522522</strong></p>
                  <p>4. Enter Account: <strong>1342330668</strong></p>
                  <p>5. Enter Amount: <strong>KSh {total.toLocaleString()}</strong></p>
                  <p>6. Enter your PIN and send</p>
                  <p>7. Copy the transaction code from the confirmation SMS</p>
                </div>
              </div>

              <FormField
                control={form.control}
                name="transactionCode"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>MPESA Transaction Code *</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="Enter MPESA transaction code (e.g. QEJ2K8X4M1)" 
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <Button 
                type="submit" 
                className="w-full" 
                size="lg"
                disabled={isSubmitting || cartItems.length === 0}
              >
                {isSubmitting ? "Processing..." : "Place Order"}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>

      {/* Order Summary */}
      <Card>
        <CardHeader>
          <CardTitle>Order Summary</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {cartItems.map((item) => (
            <div key={`${item.product.id}-${item.variant.id}`} className="flex justify-between items-start border-b pb-2">
              <div className="flex-1">
                <div className="font-medium text-sm">{item.product.name}</div>
                <div className="text-xs text-muted-foreground">
                  {item.variant.style} • {item.variant.colour} • {item.variant.inch}" • {item.variant.density}
                </div>
                <div className="text-xs">Qty: {item.quantity}</div>
              </div>
              <div className="text-sm font-medium">
                KSh {(item.variant.price * item.quantity).toLocaleString()}
              </div>
            </div>
          ))}

          <div className="space-y-2 pt-4">
            <div className="flex justify-between">
              <span>Subtotal:</span>
              <span>KSh {subtotal.toLocaleString()}</span>
            </div>
            <div className="flex justify-between">
              <span>Delivery Fee:</span>
              <span>KSh {Number(deliveryFee).toLocaleString()}</span>
            </div>
            <div className="flex justify-between font-bold text-lg border-t pt-2">
              <span>Total:</span>
              <span>KSh {total.toLocaleString()}</span>
            </div>
          </div>

          {selectedCounty && (
            <div className="text-sm text-muted-foreground bg-muted p-3 rounded">
              <div className="font-medium mb-1">Estimated Delivery:</div>
              <div>{selectedCounty.estimated_days_min}-{selectedCounty.estimated_days_max} business days</div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}